openapi: "3.0.3"
info:
  title: "pulsar_backend API"
  description: "pulsar_backend API"
  version: "1.0.0"
servers:
  - url: "https://pulsar_backend"
paths:
  /:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Hello World!"
  /*:
    get:
      description: ""
      parameters:
        - name: "*"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "404":
          description: "Not Found"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "404 Not Found"
  /user:
    post:
      description: ""
      parameters:
        - name: "steamId"
          in: "query"
          required: false
          schema:
            type: "number"
        - name: "discordId"
          in: "query"
          required: false
          schema:
            type: "number"
        - name: "gmodstoreId"
          in: "query"
          required: false
          schema:
            type: "string"
      responses:
        "401":
          description: "Unauthorized"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Unauthorized."
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Missing parameters."
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserCreateResponse"
        "409":
          description: "Conflict"
          content:
            '*/*':
              schema:
                type: "string"
        "500":
          description: "Internal Server Error"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Internal Server Error."
  /user/{id}:
    get:
      description: ""
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "401":
          description: "Unauthorized"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Unauthorized."
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Invalid parameters."
                Example#2:
                  value: "Missing parameters."
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "User not found."
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/User"
  /user/{id}/{type}:
    get:
      description: ""
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "type"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "401":
          description: "Unauthorized"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Unauthorized."
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Invalid parameters."
                Example#2:
                  value: "Invalid id parameter."
                Example#3:
                  value: "Invalid parameters."
                Example#4:
                  value: "Invalid parameters."
                Example#5:
                  value: "Missing parameters."
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "User not found."
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/User"
  /user/{id}/addons:
    get:
      description: ""
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "401":
          description: "Unauthorized"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Unauthorized."
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Missing parameters."
                Example#2:
                  value: "Invalid parameters."
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "User not found."
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
components:
  schemas:
    UserCreateResponse:
      type: "object"
      properties:
        id:
          type: "string"
          format: "uuid"
      required:
        - "id"
    User:
      type: "object"
      properties:
        id:
          type: "string"
          format: "uuid"
        steamId:
          type: "integer"
          format: "int64"
        gmodstoreId:
          type: "string"
          format: "uuid"
        discordId:
          type: "integer"
          format: "int64"
      required:
        - "gmodstoreId"